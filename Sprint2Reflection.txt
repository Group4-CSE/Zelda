Sprint 2 Reflection
Team 4 (10:30) 

Timeline: 
As a team, we decided it was best to start with designing the interfaces for Player, Enemies, Blocks, Projectiles, Controller, etc. During our first week, we spent majority of the time implementing these different interfaces from easiest to hardest. (Blocks -> Player). This is evident in our code frequency graph shown under the insight tab of Github. 

During our second week, we tried to implement the concrete classes starting with the Blocks. All team members were busy with other schoolwork, therefore, in the graph it appears that we did less work than week 1. 

Week 3, was where we began implementing all of the concrete classes. Most of the blocks, items, and enemies classes were easy to implement as they all contained the same structure of code. The only difference was the position of their sprites in the spritesheets. Afterwards, the the player class, keyboard controller, and command classes were implemented. This is when majority of the code was implemented. 

Highlights:
1. LinkedList Implementation to handle Player sprite animation. 

Negatives:
1. Lots of problems with version control using Github in the beginning. Some members were not able to push or pull. Now, this is not a problems as we are all more familiar with using Gitbub.

Goal for Sprint 3:
1. Start earlier

Notes from In-class Code Review (Friday): 
1. Separate Blocks from Sprite Drawing 
2. Change open-door in constructor 
3. Anything not moving - down need to separate drawing details into another class 
4. If More complicated - Good idea to separate individual concerns (New Spritesheets?) 
5. Field of ISprite instead extends (Is-a relationship) 
6. Extracting logic for move in Enemies to another function 
7. Know stopping position 
8. Separate Enemy and Player in future 
9. Simplify If-else (Use And Or logic?) 
10. Make command of projectiles and items 
11. Declare as IEnemy or IObject (ISprite is for drawing) 
12. Keep it simple for future
